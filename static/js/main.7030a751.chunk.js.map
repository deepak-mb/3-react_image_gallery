{"version":3,"sources":["components/layout/Navbar.js","components/layout/Image.js","components/layout/Images.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","href","Image","props","id","images","map","image","urls","regular","target","key","rel","src","small","alt","user","profile_image","medium","name","Images","state","searchQuery","result","onChange","e","preventDefault","_this","setState","Object","defineProperty","value","onSubmit","axios","get","concat","then","response","data","results","alert","this","type","placeholder","aria-label","maxLength","layout_Image","Component","App","layout_Navbar","layout_Images","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uOAmDeA,eAjDA,WACb,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iDACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAeC,KAAK,MAAjC,mEC2BSC,SA7BD,SAAAC,GAEZ,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBAAwBI,GAAG,UACvCD,EAAME,OAAOC,IAAI,SAAAC,GAAK,OACrBV,EAAAC,EAAAC,cAAA,KACEE,KAAMM,EAAMC,KAAKC,QACjBC,OAAO,SACPV,UAAU,OACVW,IAAKJ,EAAMH,GACXQ,IAAI,uBAEJf,EAAAC,EAAAC,cAAA,OAAKc,IAAKN,EAAMC,KAAKM,MAAOC,IAAI,GAAGf,UAAU,GAAGW,IAAKJ,EAAMH,KAC3DP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OACEc,IAAKN,EAAMS,KAAKC,cAAcC,OAC9BH,IAAI,cACJf,UAAU,oBAEZH,EAAAC,EAAAC,cAAA,SAAIQ,EAAMS,KAAKG,+BC0CdC,6MA1DbC,MAAQ,CACNC,YAAa,GACbC,OAAQ,MAGVC,SAAW,SAAAC,GACTA,EAAEC,iBACFC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GAAiBJ,EAAEf,OAAOS,KAAOM,EAAEf,OAAOqB,WAE5CC,SAAW,SAAAP,GACTA,EAAEC,iBADY,IAENJ,EAAgBK,EAAKN,MAArBC,YACJA,EACFW,IACGC,IADH,4HAAAC,OAEgIb,EAFhI,kCAIGc,KAAK,SAAAC,GACJV,EAAKC,SAAS,CACZL,OAAQc,EAASC,KAAKC,YAI5BC,MAAM,wGAKR,OACE3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,QACEiC,SAAUS,KAAKT,SACfhC,UAAU,mDAEVH,EAAAC,EAAAC,cAAA,SACEC,UAAU,uBACV0C,KAAK,SACLC,YAAY,SACZC,aAAW,SACXC,UAAU,KACV1B,KAAK,cACLK,SAAUiB,KAAKjB,WAEjB3B,EAAAC,EAAAC,cAAA,UACEC,UAAU,qDACV0C,KAAK,UAFP,WAOF7C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sDACbH,EAAAC,EAAAC,cAAC+C,EAAD,CAAOzC,OAAQoC,KAAKpB,MAAME,kBApDfwB,aCQNC,MATf,WACE,OACEnD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAACkD,EAAD,MACApD,EAAAC,EAAAC,cAACmD,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.7030a751.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Navbar = () => {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <a className=\"navbar-brand\" href=\"#!\">\n        Image Search\n      </a>\n      {/* <form className=\"form-inline my-2 my-lg-0 ml-md-auto search-form\">\n        <input\n          className=\"form-control mr-sm-2\"\n          type=\"search\"\n          placeholder=\"Search\"\n          aria-label=\"Search\"\n        />\n        <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">\n          Search\n        </button>\n      </form> */}\n      {/* <button\n        className=\"navbar-toggler\"\n        type=\"button\"\n        data-toggle=\"collapse\"\n        data-target=\"#navbarSupportedContent\"\n        aria-controls=\"navbarSupportedContent\"\n        aria-expanded=\"false\"\n        aria-label=\"Toggle navigation\"\n      >\n        <span className=\"navbar-toggler-icon\" />\n      </button>\n\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n        <form className=\"form-inline my-2 my-lg-0 ml-auto\">\n          <input\n            className=\"form-control mr-sm-2\"\n            type=\"search\"\n            placeholder=\"Search\"\n            aria-label=\"Search\"\n          />\n          <button\n            className=\"btn btn-outline-success my-2 my-sm-0\"\n            type=\"submit\"\n          >\n            Search\n          </button>\n        </form>\n      </div> */}\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./image.css\";\n\nconst Image = props => {\n  // console.log(props);\n  return (\n    <div className=\"image-inner-container\" id=\"photos\">\n      {props.images.map(image => (\n        <a\n          href={image.urls.regular}\n          target=\"_blank\"\n          className=\"anch\"\n          key={image.id}\n          rel=\"noopener noreferrer\"\n        >\n          <img src={image.urls.small} alt=\"\" className=\"\" key={image.id} />\n          <div className=\"overlay\">\n            <div className=\"text\">\n              <img\n                src={image.user.profile_image.medium}\n                alt=\"Profile pic\"\n                className=\"profile-picture\"\n              />\n              <p>{image.user.name}</p>\n            </div>\n          </div>\n        </a>\n      ))}\n    </div>\n  );\n};\n\nexport default Image;\n","import React, { Component } from \"react\";\nimport Image from \"./Image\";\nimport axios from \"axios\";\n// import Loading from \"./Loading\";\n// console.log(process.env.REACT_APP_UNSPLASH_API_KEY);\n\nclass Images extends Component {\n  state = {\n    searchQuery: \"\",\n    result: []\n  };\n\n  onChange = e => {\n    e.preventDefault();\n    this.setState({ [e.target.name]: e.target.value });\n  };\n  onSubmit = e => {\n    e.preventDefault();\n    const { searchQuery } = this.state;\n    if (searchQuery) {\n      axios\n        .get(\n          `https://api.unsplash.com/search/photos/?client_id=b0a35f2b4c7ddb2842b10856bd95b914158cb1b51f59ee85be5275cebbb253c0&query=${searchQuery}&per_page=30&order_by=popular`\n        )\n        .then(response => {\n          this.setState({\n            result: response.data.results\n          });\n        });\n    } else {\n      alert(\"Please enter a search item.\");\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"px-3\">\n        <form\n          onSubmit={this.onSubmit}\n          className=\"form-inline my-2 my-lg-0 ml-md-auto search-form\"\n        >\n          <input\n            className=\"form-control mr-sm-2\"\n            type=\"search\"\n            placeholder=\"Search\"\n            aria-label=\"Search\"\n            maxLength=\"20\"\n            name=\"searchQuery\"\n            onChange={this.onChange}\n          />\n          <button\n            className=\"btn btn-outline-success my-2 my-sm-0 search-button\"\n            type=\"submit\"\n          >\n            Search\n          </button>\n        </form>\n        <div className=\"image-outer-container my-1 my-sm-2 my-md-3 my-lg-4\">\n          <Image images={this.state.result} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Images;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Navbar from \"./components/layout/Navbar\";\nimport Images from './components/layout/Images'\nfunction App() {\n  return (\n    <div className=\"App container\">\n      <Navbar />\n      <Images />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}